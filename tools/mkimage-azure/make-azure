#!/bin/sh

set -e

mkdir -p /tmp/image
cd /tmp/image

# input is a tarball of kernel and initrd.img on stdin
# output is a vhd on stdout

mkdir -p files

cd files

touch puppy

# extract. As guestfs base is currently Debian, no compression support
# only if stdin is a tty, if so need files volume mounted...
[ -t 0 ] || tar xf -

INITRD="$(find . -name '*.img')"
KERNEL="$(find . -name kernel -or -name '*bzImage')"
CMDLINE="$*"

[ "$KERNEL" = "./kernel" ] || mv "$KERNEL" vmlinuz64
[ "$INITRD" = "./initrd.img" ] || mv "$INITRD" initrd.img

# clean up subdirectories
find . -mindepth 1 -maxdepth 1 -type d | xargs rm -rf

CFG="DEFAULT linux
LABEL linux
    KERNEL /kernel
    INITRD /initrd.img
    APPEND ${CMDLINE}
"

printf "$CFG" > syslinux.cfg

cd ..

tar cf files.tar -C files .

#Â create an empty disk for the data
qemu-img create -f raw disk.img 1G 1>&2

# create a 1M partition for Azure
guestfish -a disk.img <<EOF
  run

  part-init /dev/sda mbr
  part-add /dev/sda primary 128 2175
  part-add /dev/sda primary 2176 2097151

  mke2fs /dev/sda2 fstype:ext4

  mkmountpoint /root
  mount /dev/sda2 /root

  tar-in files.tar /root/

  upload /usr/lib/SYSLINUX/mbr.bin /root/mbr.bin
  copy-file-to-device /root/mbr.bin /dev/sda size:440
  rm /root/mbr.bin
  extlinux /root
  part-set-bootable /dev/sda 2 true
EOF

qemu-img convert -f raw -O vpc -o subformat=fixed,force_size disk.img disk.vhd 1>&2

cat disk.vhd
